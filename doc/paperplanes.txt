*paperplanes* Send snippets to online services

>
                                              /                  
         __    __    __    __    __     __   /  __    __    __   __
       /   ) /   ) /   ) /___) /   )  /   ) / /   ) /   ) /___) (_ `
      /   / (‾‾‾( /   / (___  /      /   / / (‾‾‾( /   / (___  (__)
     /           /                  /                            
    /           /                  /                             
    

=====================================================*paperplanes* *paperplanes-toc*

Purpose .................................................... |paperplanes-purpose|
Install & Setup ...................................... |paperplanes-install-setup|
Usage ........................................................ |paperplanes-usage|
Command .................................................... |paperplanes-command|
Functions ................................................ |paperplanes-functions|
  post_string .......................................... |paperplanes-post-string|
  post_range ............................................ |paperplanes-post-range|
  post_selection .................................... |paperplanes-post-selection|
  post_buffer .......................................... |paperplanes-post-buffer|
Providers ................................................ |paperplanes-providers|

============================================================ *paperplanes-purpose*

Purpose ~

Send snippets from Neovim to online paste bins.

`paperplanes` provides a `:[range]PP` command, as well as a generalised API.

The `:[range]PP` command automatically sets a register if desired.

====================================================== *paperplanes-install-setup*

Install ~

Use your package manager.

Setup ~
>
require("paperplanes").setup({
  register = "+",
  provider = "0x0.st",
  provider_options = {},
  cmd = "curl"
})
```

- `register` - any valid register name or false
- `provider` - "0x0.st", "ix.io", "dpaste.org", "sprunge.us" or "paste.rs"
- `provider_options` - passed to selected provider, check provider to know if
                       you need to use this option. Not all providers are option
                       aware.
- `cmd` - curl-compatible executable

See also |paperplanes-providers|.

============================================================== *paperplanes-usage*

Usage ~

`paperplanes` provides one command, `:PP` and a number of functions for mapping.

============================================================ *paperplanes-command*

Command ~
>
  :PP -> Post entire current buffer, prints URL and sets desired register.

  :[range]PP -> Post selected range, prints URL and sets desired register.

Note: Vim does not allow column specification from the command line, so
      [range] is linewise only.

========================================================== *paperplanes-functions*

Functions ~

Note: Functions are provided in `snake_case` and `kebab-case`.

Note: All functions accept a `callback` argument which is called with
      `url, nil` or `nil, errors` .

Note: Functions to not automatically print the url or set any registers.

-------------------------------------------------------- *paperplanes-post-string*

`post_string(string, meta, callback)`

Post given string.

`meta` is a table containing `path`, `filename`, `extension` and `filetype`
values if possible.

--------------------------------------------------------- *paperplanes-post-range*

`post_range(buffer, start_pos, end_pos, callback)`

Post given range.

`start_pos` & `end_pos` may be `line` or `[line, column]` .

----------------------------------------------------- *paperplanes-post-selection*

`post_selection(callback)`

Post current selection.

-------------------------------------------------------- *paperplanes-post-buffer*

`post_buffer(buffer, callback)`

Post given buffer.

========================================================== *paperplanes-providers*

Providers ~

`paperplanes` supports the following providers, see sites for TOS and features.

- https://0x0.st
- https://paste.sr.ht
- https://dpaste.org
- https://paste.rs
- http://ix.io (HTTP ONLY)
- http://sprunge.us (HTTP ONLY)

To add your own provider, you must return a function that accepts three
arguments:

- `content`: the content to post
- `metadata`: a table of filename, extension, filetype and path
- `opts`: a table of provider options

This function should return two values:

- `args`
- `handle-response` callback.

The `args` table should contain curl arguments used to build a "form" POST
request. The final element should be the provider endpoint URL.

The `after` callback receives the request response (a string) and the HTTP
status code (a number). It should parse the response to extract or create the
appropriate URL, and return `url` in the case of success or `nil, errors` if
the response or HTTP status indicates an error.

See `fnl/paperplanes/providers/*.fnl` for examples.

